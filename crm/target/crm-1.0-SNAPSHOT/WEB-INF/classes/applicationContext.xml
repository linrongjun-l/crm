<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--spring 配置文件-->

    <context:component-scan base-package="cn.euct.settings.service"/>
    <context:component-scan base-package="cn.euct.workbench.service"/>
    <!--读取配置文件jdbc.properties-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--声明数据源DataSource-->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
    </bean>


    <!--声明的是mybatis中提供的SqlSessionFactoryBean类，这个类内部创建SqlSessionFactory的-->
    <bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="myDataSource"/>
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>

    <!--创建dao对象，使用SqlSession的getMapper（StudentDao.class）
        MapperScannerConfigurer:在内部调用getMapper（）生成每个dao接口的代理对象
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="SqlSessionFactory"/>
        <property name="basePackage" value="cn.euct.settings.dao"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="SqlSessionFactory"/>
        <property name="basePackage" value="cn.euct.workbench.dao"/>
     </bean>

  <!--  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="SqlSessionFactory"/>
        <property name="basePackage" value="cn.euct.workbench.dao"/>
    </bean>-->

    <!--使用@Transactional，事务处理-->
    <!--声明spring事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>
    </bean>
    <!-- 事务驱动-->
    <tx:annotation-driven transaction-manager="transactionManager"/>


    <!--使用Aop的，事务处理-->
    <!--
 

    &lt;!&ndash;声明spring事务管理器&ndash;&gt;
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="数据源id"/>
    </bean>


     &lt;!&ndash;声明方法需要的事务类型（配置方法的事务属性【隔离级别、传播行为、超时】）&ndash;&gt;
    <tx:advice id="自定义" transaction-manager="事务管理器id">
        &lt;!&ndash;配置事务属性&ndash;&gt;
        <tx:attributes>
            <tx:method name="*" isolation="DEFAULT" read-only="false" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    &lt;!&ndash;配置aop哪些类要创建代理&ndash;&gt;

    <aop:config>
        &lt;!&ndash; 切入点&ndash;&gt;
        <aop:pointcut id="mypointcut" expression="execution(* *..service..*.*(..))"/>
        &lt;!&ndash;切面：将切入点和通知整合&ndash;&gt;
        <aop:advisor advice-ref="事务属性id" pointcut-ref="切入点id"/>
    </aop:config>
-->
</beans>